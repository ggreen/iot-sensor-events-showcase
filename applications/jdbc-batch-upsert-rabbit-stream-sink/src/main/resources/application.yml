server.port: 8880
stream:
  sql:
    - UPDATE sensor_record set data = jsonb_set(data,array['alarmCount'],to_jsonb((select (data->>'alarmCount')::int+1 from sensor_record nested_sq where nested_sq.id = :id))) where id = :id;
    - UPDATE sensor_record set data = jsonb_set(data,array['priority'],(SELECT CASE
      WHEN (select (data->>'alarmCount')::int from sensor_record where id = :id)  < 10 THEN '0'
      WHEN (select (data->>'alarmCount')::int from sensor_record where id = :id)  < 20 THEN '1'
      ELSE '2'
      END AS PRIORITY_ID)::jsonb) where id = :id;
rabbitmq:
  username: guest
  password: guest
  host: localhost
  port: 5552
  stream:
    in: SensorMeasurementAlert
#The Following end points used a k8 Readiness probbe
management:
  endpoints:
    web:
      exposure:
        include: info, health
spring:
  config:
    import: optional:configserver:http://localhost:8888
  datasource:
    url: jdbc:postgresql://localhost:5432/postgres
    username: postgres
    password: security
    driver-class-name: org.postgresql.Driver
  flyway:
    baselineOnMigrate: false
    url: jdbc:postgresql://localhost:5432/postgres
    user: postgres
    password: security
  r2dbc:
    url:
    username: postgres
    password: security
  jpa:
    hibernate:
      ddl-auto: update
    database-platform: org.hibernate.dialect.PostgreSQLDialect
    show-sql: false
  application:
    name: jdbc-batch-upsert-rabbit-stream-sink
postgres:
  host: localhost
  database: postgres
  username: postgres
  password: security